{
    "data": {
        "httpHostSource": {
            "headerNameList": [
                "X-Forwarded-Host",
                "Host"
            ],
            "listValueLocation": "LAST"
        },
        "virtualHosts": [
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "sso.${BASE_HOSTNAME}",
                "id": 5,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "sso-admin.${BASE_HOSTNAME}",
                "id": 7,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "api.${BASE_HOSTNAME}",
                "id": 10,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 3000,
                "host": "pingaccess",
                "id": 11,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "host.docker.internal",
                "id": 12,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "mockregister.${BASE_HOSTNAME}",
                "id": 13,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "pd.${BASE_HOSTNAME}",
                "id": 14,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            }
        ],
        "acmeDefaultServer": {
            "location": "https://localhost:9000/pa-admin-api/v3/acme/servers/8572f98e-482e-41c2-8a3d-6a0b2fc99734",
            "id": "8572f98e-482e-41c2-8a3d-6a0b2fc99734"
        },
        "httpsListeners": [
            {
                "restartRequired": false,
                "name": "ADMIN",
                "useServerCipherSuiteOrder": true,
                "id": 1,
                "keyPairId": 5
            },
            {
                "restartRequired": false,
                "name": "ENGINE",
                "useServerCipherSuiteOrder": true,
                "id": 2,
                "keyPairId": 8
            },
            {
                "restartRequired": true,
                "name": "AGENT",
                "useServerCipherSuiteOrder": true,
                "id": 3,
                "keyPairId": 7
            }
        ],
        "rules": [
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import javax.xml.bind.DatatypeConverter;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateEncodingException;\nimport java.security.cert.X509Certificate;\n\ndef HEADER_CERTIFICATETHUMBPRINT = \"X-CertificateThumbprint\";\n\nexc?.request?.header?.removeFields(HEADER_CERTIFICATETHUMBPRINT);\n\ndef certChain = exc?.sslData?.clientCertificateChain\nif(certChain && !certChain.isEmpty())\n{\n  exc?.request?.header?.add(HEADER_CERTIFICATETHUMBPRINT, getThumbprint(certChain));\n}\n\npass();\n\nString getThumbprint(def certList)\n        throws NoSuchAlgorithmException, CertificateEncodingException {\n\n    if(certList == null || certList.isEmpty())\n          return null;\n    \n    def cert = certList.get(0);\n          \n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    byte[] der = cert.getEncoded();\n    md.update(der);\n    byte[] digest = md.digest();\n    String digestHex = DatatypeConverter.printHexBinary(digest);\n    return digestHex.toLowerCase();\n\n}",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-HoK--SendThumbprint",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 1,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "4",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import javax.xml.bind.DatatypeConverter;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateEncodingException;\nimport java.security.cert.X509Certificate;\nimport java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\n\ndef authHeader = exc?.request?.header?.getValues(\"Authorization\");\n\ndef certChain = exc?.sslData?.clientCertificateChain\nif(certChain && !certChain.isEmpty())\n{\n  if(authHeader && authHeader?.size() == 1)\n  {\n    def token = exc?.request?.header?.getFirstValue(\"Authorization\");\n\n    if(validateThumbprint(token, certChain))\n      pass();\n    else\n      fail();\n  }\n  else\n    fail();\n}\nelse\n\tpass();\n\nboolean validateThumbprint(def token, def certList)\n{\n  if(token != null && token.startsWith(\"Bearer \"))\n  {\n    def accessToken = token.replace(\"Bearer \", \"\");\n    def cnfValue = getAccessTokenClaim(accessToken, \"cnf.x5t#S256\");\n    \n    if(cnfValue == null || cnfValue.equals(\"\"))\n    \treturn true;\n    \t\n\tdef expectedThumbprint = getThumbprint(certList);\n    \n    if(expectedThumbprint != null && cnfValue.equals(expectedThumbprint))\n      return true;\n    else\n      return false;\n  }\n  \n  return true;\n}\n\nString getThumbprint(def certList)\n        throws NoSuchAlgorithmException, CertificateEncodingException {\n\n    if(certList == null || certList.isEmpty())\n          return null;\n    \n    def cert = certList.get(0);\n          \n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    byte[] der = cert.getEncoded();\n    md.update(der);\n    byte[] digest = md.digest();\n    String digestHex = DatatypeConverter.printHexBinary(digest);\n    return digestHex.toLowerCase();\n\n}\n\nString getAccessTokenClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n  \n    return getClaimValue(accessTokenBody, claim);\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n{\n    ObjectMapper mapper = new ObjectMapper();       \n    JsonNode resultObject = mapper.readTree(responseStr);\n\n    String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n\n    for(String path : splitJsonPath)\n    {\n        resultObject = resultObject.findPath(path);\n    }\n\n    return resultObject.textValue();\n\n}",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-HoK-VerifyAccessToken",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 2,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "5",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\n\ndef host = exc?.request?.header?.host;\n\nif(host.equals(\"pingaccess:3000\"))\n{\n  pass();\n}\nelse\n{\n  def CDR_CLIENTID_PREFIX = \"dcr-\";\n\n  def token = exc?.request?.header?.getFirstValue(\"Authorization\");\n  def isPass = true;\n\n  def clientId = null;\n  \n  if(token)\n  \tclientId = getAccessTokenClaim(token, \"client_id\");\n\n  if(clientId == null)\n  {\n    def clientAssertion = getRequestParameter(exc?.request, \"client_assertion\");\n    if(clientAssertion != null)\n    \tclientId = getAccessTokenClaim(clientAssertion, \"sub\");\n  }\n\n  if(clientId == null)\n    clientId = getRequestParameter(exc?.request, \"client_id\");\n  \n  if(clientId == null)\n    clientId = \"\";\n\n  if(clientId.startsWith(CDR_CLIENTID_PREFIX))\n  {\n    def certChain = exc?.sslData?.clientCertificateChain;\n    if(!certChain || certChain.isEmpty())\n    isPass = false;\n  }\n\n  if(isPass)\n  pass();\n  else\n    fail();\n}\n\nString getRequestParameter(def request, def paramName)\n{\n  def postParams = request?.getPostParams();\n  if(postParams == null)\n    return null;\n  \n  if(!postParams.containsKey(paramName))\n    return null;\n  \n  return postParams.get(paramName)[0];\n}\n\nString getAccessTokenClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    if(accessTokenSplit.length != 3)\n      return null;\n  \n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n  \n    return getClaimValue(accessTokenBody, claim);\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n{\n    ObjectMapper mapper = new ObjectMapper();       \n    JsonNode resultObject = mapper.readTree(responseStr);\n\n    String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n\n    for(String path : splitJsonPath)\n    {\n        resultObject = resultObject.findPath(path);\n    }\n\n    return resultObject.textValue();\n\n}",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-RequireClientAuth",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 3,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "allowedReqHeaders": [
                        "Authorization",
                        "Content-Type",
                        "Accept"
                    ],
                    "exposedRespHeaders": [],
                    "cacheMaxAge": 600,
                    "allowedOrigins": ["*"],
                    "overriddenReqMethods": null,
                    "allowCredentials": false
                },
                "name": "CORS - Allow All",
                "className": "com.pingidentity.pa.policy.cors.CrossOriginRequestPolicyInterceptor",
                "id": 4,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "6",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "def request = exc?.request;\n\nif(\"post\".equalsIgnoreCase(request?.method?.methodName))\n{\n  def postParams = request?.getPostParams();\n  \n  if(postParams.containsKey(\"token\"))\n  {\n    def tokenValues = postParams?.get(\"token\");\n    \n    if(tokenValues.length != 1)\n    \tfail();\n    else\n    {\n      def tokenValue = tokenValues[0];\n\n      //assuming access token is a JWT\n      if(tokenValue.indexOf(\".\") > 0)\n        fail();\n      else\n      {\n        if(!postParams.containsKey(\"token_type_hint\"))\n        {\n          def bodyStr = new String(request?.body?.content);\n          bodyStr = bodyStr + \"&token_type_hint=refresh_token\";\n          request?.setBodyContent(bodyStr.getBytes());\n          pass();\n        }\n        pass();\n      }\n    }\n  }\n  else\n    anything();\n}\nelse\n  anything();",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "PingFederate-RestrictIntrospectRefreshToken",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 5,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "tokenEndpoint": "/as/token.oauth2",
                    "revocationEndpoint": "/as/revoke_token.oauth2",
                    "retainAttributeList": ["cdr_arrangement_id"],
                    "introspectionEndpoint": "/as/introspect.oauth2",
                    "encryptionJWK": "{\"kty\":\"oct\",\"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"}",
                    "issuer": "anybank"
                },
                "name": "CDR AU - Refresh Token Processor",
                "className": "com.pingidentity.pa.cdr.CDRRefreshTokenProcessor",
                "id": 6,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\n\n\nif(!exc?.response && getRequestParameter(exc?.request, \"request\") != null)\n{\n  def requestJwt = getRequestParameter(exc?.request, \"request\");\n  \n  copyRequestObjectParameters(exc?.request, requestJwt, \"code_challenge\");\n  copyRequestObjectParameters(exc?.request, requestJwt, \"code_challenge_method\");\n  \n}\n\nanything();\n\nvoid copyRequestObjectParameters(def request, def requestJwt, def paramName)\n{\n  def delimiter = '?';\n  if(request?.uri.contains('?'))\n  \tdelimiter = '&';\n  \n  if(getJwtTokenClaim(requestJwt, paramName) != null)\n  {\n    def newUri = request?.uri.replaceAll(paramName + \"=\", paramName + \"_old=\");    \n    request?.setUri(newUri + delimiter + paramName + \"=\" + getJwtTokenClaim(requestJwt, paramName));\n  }\n}\n\nString getRequestParameter(def request, def paramName)\n{\n  def paramValue = getQueryParameter(request, paramName);\n  \n  if(!paramValue)\n  \tparamValue = getPostParameter(request, paramName);\n  \n  return paramValue;\n}\n\nString getQueryParameter(def request, def paramName)\n{\n  def params = request?.getQueryStringParams();\n  \n  if(params == null)\n    return null;\n  \n  if(!params.containsKey(paramName))\n    return null;\n  \n  return params.get(paramName)[0];\n}\n\nString getPostParameter(def request, def paramName)\n{\n  def params = request?.getQueryStringParams();\n  \n  if(params == null)\n    return null;\n  \n  if(!params.containsKey(paramName))\n    return null;\n  \n  return params.get(paramName)[0];\n}\n\nString getJwtTokenClaim(String jwt, String claim)\n{\n    def jwtSplit = jwt.split(\"\\\\.\");\n    if(jwtSplit.length != 3)\n      return null;\n  \n    def jwtBodyEncoded = jwtSplit[1];\n    def jwtBody = new String(Base64.getDecoder().decode(jwtBodyEncoded));\n  \n    return getClaimValue(jwtBody, claim);\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n{\n    ObjectMapper mapper = new ObjectMapper();       \n    JsonNode resultObject = mapper.readTree(responseStr);\n\n    String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n\n    for(String path : splitJsonPath)\n    {\n        resultObject = resultObject.findPath(path);\n    }\n\n    return resultObject.textValue();\n\n}",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "FAPI Conformance - Fix PKCE",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 7,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "5",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\n\ndef host = exc?.request?.header?.host;\n\nif(host.equals(\"pingaccess:3000\"))\n{\n  pass();\n}\nelse\n{\n  def certChain = exc?.sslData?.clientCertificateChain;\n  if(!certChain || certChain.isEmpty())\n    fail();\n  else\n    pass();\n}\n",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-RequireClientAuthAlways",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 8,
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ]
            }
        ],
        "sites": [
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": true,
                "targets": ["pingfederate:9031"],
                "expectedHostname": null,
                "skipHostnameVerification": true,
                "name": "pingfederate",
                "id": 1,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["deepthought-admin-service:8080"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "Deepthought Product Admin Service Site",
                "id": 4,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["deepthought-product-api:8081"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "Deepthought Product Service",
                "id": 5,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["deepthought-bank-api:8081"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "Deepthought Banking API",
                "id": 6,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": true,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["cdrregister:8084"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "cdr-register",
                "id": 7,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": true,
                "targets": ["pingdirectory:443"],
                "expectedHostname": null,
                "skipHostnameVerification": true,
                "name": "pingdirectory",
                "id": 8,
                "availabilityProfileId": 1,
                "maxConnections": -1
            }
        ],
        "adminAuthBasic": {"enabled": true},
        "httpMonitoring": {"auditLevel": "OFF"},
        "httpProtocolSource": {"headerName": "X-Forwarded-Proto"},
        "reservedApplication": {"contextRoot": "/pa"},
        "tokenProvider": {
            "type": "PingFederate",
            "useThirdParty": false
        },
        "webSessionMgmt": {
            "nonceCookieTimeToLiveInMinutes": 5,
            "signingAlgorithm": "P-256",
            "sessionStateCookieName": "PA_STATE",
            "encryptionAlgorithm": "A128CBC-HS256",
            "keyRollEnabled": true,
            "issuer": "PingAccess",
            "cookieName": "PA",
            "keyRollPeriodInHours": 24,
            "updateTokenWindowInSeconds": 60
        },
        "adminConfig": {
            "httpProxyId": 0,
            "httpsProxyId": 0,
            "hostPort": "pingaccess-admin:9090"
        },
        "adminAuthWebSession": {
            "cookieDomain": null,
            "audience": "PingAccessUI",
            "sessionTimeoutInMinutes": 240,
            "expirationWarningInMinutes": 1,
            "idleTimeoutInMinutes": 30,
            "sessionPollIntervalInSeconds": 10,
            "cookieType": "Encrypted"
        },
        "pingFederate": {
            "trustedCertificateGroupId": 4,
            "useSlo": false,
            "auditLevel": "OFF",
            "useProxy": false,
            "secure": true,
            "targets": ["pingfederate:9031"],
            "expectedHostname": "",
            "backChannelBasePath": null,
            "basePath": null,
            "port": 443,
            "skipHostnameVerification": true,
            "backChannelSecure": true,
            "host": "sso.${BASE_HOSTNAME}"
        },
        "trustedCerts": [
            {
                "fileData": "${_data_trustedCerts_3_pingfederate_service_fileData}",
                "alias": "pingfederate-service",
                "id": 3
            },
            {
                "fileData": "${_data_trustedCerts_17_cdr_trustcert_default_fileData}",
                "alias": "cdr_trustcert_default",
                "id": 17
            }
        ],
        "engineListeners": [
            {
                "trustedCertificateGroupId": 0,
                "port": 3000,
                "name": "Default Engine Listener",
                "id": 2,
                "secure": true
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 7080,
                "name": "HTTP Engine Listener",
                "id": 3,
                "secure": false
            }
        ],
        "httpIpSource": {
            "fallbackToLastHopIp": true,
            "headerNameList": ["X-Forwarded-For"],
            "listValueLocation": "LAST"
        },
        "globalUnprotectedResources": [{
            "auditLevel": "ON",
            "wildcardPath": "/ext/oauth/standardATM/jwks",
            "name": "StandardATM JWKS endpoint",
            "description": "JWKS endpoint",
            "id": "3a2b5451-00ec-40e3-9556-183452460586",
            "enabled": true
        }],
        "loadBalancingStrategies": [{
            "configuration": {
                "stickySessionEnabled": false,
                "cookieName": "PA_S"
            },
            "name": "Default Round Robin Strategy",
            "className": "com.pingidentity.pa.ha.lb.roundrobin.CookieBasedRoundRobinPlugin",
            "id": 2
        }],
        "resources": [
            {
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 1,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/clients.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "DCR Create Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 4,
                "pathPatterns": [{
                    "pattern": "/as/clients.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [{
                        "id": 8,
                        "type": "Rule"
                    }],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/revoke_token.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Revocation Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 5,
                "pathPatterns": [{
                    "pattern": "/as/revoke_token.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 6,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/introspect.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Introspection Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 6,
                "pathPatterns": [{
                    "pattern": "/as/introspect.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 6,
                            "type": "Rule"
                        },
                        {
                            "id": 5,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/idp/userinfo.openid"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": false,
                "rootResource": false,
                "name": "UserInfo Service",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 7,
                "pathPatterns": [{
                    "pattern": "/idp/userinfo.openid",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/token.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Token Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 8,
                "pathPatterns": [{
                    "pattern": "/as/token.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 1,
                            "type": "Rule"
                        },
                        {
                            "id": 6,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 10,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 5,
                "policy": {
                    "Web": [],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/.well-known/openid-configuration"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": false,
                "rootResource": false,
                "name": "Well Known EndPoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 11,
                "pathPatterns": [{
                    "pattern": "/.well-known/openid-configuration",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 12,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 6,
                "policy": {
                    "Web": [],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 13,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 7,
                "policy": {
                    "Web": [],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/clients.oauth2/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "DCR Management Endpoints",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 14,
                "pathPatterns": [{
                    "pattern": "/as/clients.oauth2/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 15,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 8,
                "policy": {
                    "Web": [],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/par.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "PAR Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 16,
                "pathPatterns": [{
                    "pattern": "/as/par.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [{
                        "id": 3,
                        "type": "Rule"
                    }],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/as/authorization.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Authorization Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 17,
                "pathPatterns": [{
                    "pattern": "/as/authorization.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [{
                        "id": 7,
                        "type": "Rule"
                    }],
                    "API": []
                }
            },
            {
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 18,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 9,
                "policy": {
                    "Web": [],
                    "API": []
                }
            }
        ],
        "unknownResources": {
            "errorContentType": "HTML",
            "errorTemplateFile": "general.error.page.template.html",
            "auditLevel": "OFF",
            "errorStatusCode": 403,
            "agentDefaultMode": "DENY",
            "agentDefaultCacheTTL": 900
        },
        "rejectionHandlers": [
            {
                "configuration": {
                    "templateFile": "policy.error.page.template.html",
                    "contentType": "HTML",
                    "responseCode": 403
                },
                "name": "Default Web Rejection Handler",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 1
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.json",
                    "contentType": "JSON",
                    "responseCode": 403
                },
                "name": "Default API Rejection Handler",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 2
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.json",
                    "contentType": "JSON",
                    "responseCode": 429
                },
                "name": "Default Rate Limiting Rejection Handler",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 3
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.invalidhok.json",
                    "contentType": "JSON",
                    "responseCode": 403
                },
                "name": "AccessDenied-InvalidHoK",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 4
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.mtls.json",
                    "contentType": "JSON",
                    "responseCode": 400
                },
                "name": "AccessDenied-RequireMTLS",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 5
            },
            {
                "configuration": {
                    "templateFile": "introspect.fail.json",
                    "contentType": "JSON",
                    "responseCode": 200
                },
                "name": "Introspect-EnforceFail",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 6
            }
        ],
        "acmeServers": [
            {
                "name": "Let's Encrypt",
                "id": "08eb4cbc-20ed-409b-82c6-12fd0c92eb71",
                "acmeAccounts": [],
                "url": "https://acme-v02.api.letsencrypt.org/directory"
            },
            {
                "name": "Let's Encrypt Staging Environment",
                "id": "8572f98e-482e-41c2-8a3d-6a0b2fc99734",
                "acmeAccounts": [],
                "url": "https://acme-staging-v02.api.letsencrypt.org/directory"
            }
        ],
        "identityMappings": [{
            "configuration": {
                "headerClientCertificateMappings": [],
                "attributeHeaderMappings": [{
                    "headerName": "X-SUB",
                    "subject": true,
                    "attributeName": "sub"
                }]
            },
            "name": "Default Identity Mapping",
            "className": "com.pingidentity.pa.identitymappings.HeaderIdentityMapping",
            "id": 1
        }],
        "pingFederateOAuth": {
            "clientId": "pingaccess_validator",
            "tokenTimeToLiveSeconds": -1,
            "subjectAttributeName": "sub",
            "name": "PingFederate",
            "clientCredentials": {
                "clientId": "pingaccess_validator",
                "credentialsType": "SECRET",
                "clientSecret": {"value": "${_data_pingFederateOAuth_clientCredentials_clientSecret_value}"},
                "keyPairId": 0
            },
            "clientSecret": {"value": "${_data_pingFederateOAuth_clientSecret_value}"},
            "cacheTokens": false,
            "accessValidatorId": 1,
            "sendAudience": false,
            "useTokenIntrospection": true
        },
        "authTokenMgmt": {
            "signingAlgorithm": "P-256",
            "keyRollEnabled": true,
            "issuer": "PingAccessAuthToken",
            "keyRollPeriodInHours": 24
        },
        "keyPairs": [
            {
                "password": "${_data_keyPairs_5_Generated_ADMIN_password}",
                "fileData": "${_data_keyPairs_5_Generated_ADMIN_fileData}",
                "alias": "Generated: ADMIN",
                "hsmProviderId": 0,
                "id": 5
            },
            {
                "password": "${_data_keyPairs_7_Generated_AGENT_password}",
                "fileData": "${_data_keyPairs_7_Generated_AGENT_fileData}",
                "alias": "Generated: AGENT",
                "hsmProviderId": 0,
                "id": 7
            },
            {
                "password": "${_data_keyPairs_8_Generated_ENGINE_password}",
                "fileData": "${_data_keyPairs_8_Generated_ENGINE_fileData}",
                "alias": "Generated: ENGINE",
                "hsmProviderId": 0,
                "id": 8
            },
            {
                "password": "${_data_keyPairs_9_pingaccess_console_password}",
                "fileData": "${_data_keyPairs_9_pingaccess_console_fileData}",
                "alias": "pingaccess-console",
                "hsmProviderId": 0,
                "id": 9
            }
        ],
        "trustedCertGroups": [
            {
                "skipCertificateDateCheck": true,
                "name": "MTLS Certificate Group",
                "useJavaTrustStore": false,
                "certIds": [17],
                "id": 3,
                "systemGroup": false,
                "ignoreAllCertificateErrors": false,
                "revocationChecking": {
                    "ocsp": false,
                    "denyRevocationStatusUnknown": false,
                    "crlChecking": false
                }
            },
            {
                "skipCertificateDateCheck": true,
                "name": "PingFederate-Trust",
                "useJavaTrustStore": false,
                "certIds": [3],
                "id": 4,
                "systemGroup": false,
                "ignoreAllCertificateErrors": false,
                "revocationChecking": {
                    "ocsp": false,
                    "denyRevocationStatusUnknown": false,
                    "crlChecking": false
                }
            }
        ],
        "availabilityProfiles": [{
            "configuration": {
                "retryDelay": 250,
                "maxRetries": 2,
                "failureHttpStatusCodes": [],
                "pooledConnectionTimeout": -1,
                "readTimeout": -1,
                "connectTimeout": 10000,
                "failedRetryTimeout": 60
            },
            "name": "Default Availability Profile",
            "className": "com.pingidentity.pa.ha.availability.ondemand.OnDemandAvailabilityPlugin",
            "id": 1
        }],
        "applications": [
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": [
                    5,
                    7,
                    11,
                    12
                ],
                "spaSupportEnabled": false,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1599615017875,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 1,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "PingFederate-Application",
                "siteId": 1,
                "realm": null,
                "lastModified": 1599614117875,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [
                    10,
                    12
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1599615017689,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 5,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": [{
                        "id": 4,
                        "type": "Rule"
                    }]
                },
                "resourceOrder": [],
                "requireHTTPS": false,
                "contextRoot": "/dio-au",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Deepthought Product Admin Service",
                "siteId": 4,
                "realm": null,
                "lastModified": 1599614117689,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [
                    10,
                    11,
                    12
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1599615017761,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 6,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        }
                    ]
                },
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/cds-au/v1/banking/products",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Deepthought Product API",
                "siteId": 5,
                "realm": null,
                "lastModified": 1599614117761,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [
                    10,
                    11,
                    12
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1599615017760,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 7,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": [
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        }
                    ]
                },
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/cds-au/v1/banking",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Deepthought Bank API",
                "siteId": 6,
                "realm": null,
                "lastModified": 1599614117760,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            },
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": [13],
                "spaSupportEnabled": false,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1599615017741,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 8,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "CDR Register",
                "siteId": 7,
                "realm": null,
                "lastModified": 1599614117741,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [14],
                "spaSupportEnabled": false,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1599615017810,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 9,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "PingDirectory-Web",
                "siteId": 8,
                "realm": null,
                "lastModified": 1599614117810,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            }
        ],
        "oauthKeyMgmt": {
            "signingAlgorithm": null,
            "keyRollEnabled": true,
            "keyRollPeriodInHours": 24
        }
    },
    "version": "6.1.0.3"
}